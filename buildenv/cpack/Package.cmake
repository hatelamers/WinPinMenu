set(CPACK_PACKAGE_VENDOR "${PRODUCT_VENDOR}")
set(CPACK_PACKAGE_CONTACT ${PRODUCT_MAINTANER})
if(DEFINED CPACK_SINGLE_TARGET_SYSTEM)
    set(CPACK_SYSTEM_NAME "${TARGET_ARCH_ID}")
else()
    set(CPACK_SYSTEM_NAME "${CMAKE_SYSTEM_NAME}-${TARGET_ARCH_ID}")
endif()
set(CPACK_PACKAGE_INSTALL_DIRECTORY "${PRODUCT_NAME}-${PROJECT_VERSION}")
set(CPACK_PACKAGE_INSTALL_REGISTRY_KEY "${PRODUCT_NAME}-${PROJECT_VERSION}")
set(CPACK_PACKAGE_EXECUTABLES ${MAIN_TARGET_NAME};${PRODUCT_NAME})
set(CPACK_PACKAGE_DIRECTORY "${WORKSPACE_ROOT}/distr")

file(TO_NATIVE_PATH ${PRODUCT_LICENSE_FILE} CPACK_RESOURCE_FILE_LICENSE)
set(CPACK_PACKAGE_CHECKSUM "SHA256")
set(CPACK_SOURCE_IGNORE_FILES "/thirdparty/[^/]+/(src|stamp|stage)/;/build/;/CVS/;/\\\\.svn/;/\\\\.bzr/;/\\\\.hg/;/\\\\.git/;\\\\.swp\$;\\\\.#;/#")
if(${CMAKE_SYSTEM_NAME} MATCHES Windows)
	STRING(REGEX REPLACE "\\\\" "\\\\\\\\" CPACK_RESOURCE_FILE_LICENSE "${CPACK_RESOURCE_FILE_LICENSE}")
	file(TO_NATIVE_PATH "${MAIN_TARGET_RESOURCE_DIR}/app.ico" CPACK_PACKAGE_ICON)
	STRING(REGEX REPLACE "\\\\" "\\\\\\\\" CPACK_PACKAGE_ICON "${CPACK_PACKAGE_ICON}")
	set(CPACK_NSIS_MUI_ICON "${CPACK_PACKAGE_ICON}")
	#set(CPACK_NSIS_MUI_UNIICON "${CPACK_PACKAGE_ICON}")	
	set(CPACK_NSIS_DISPLAY_NAME "${PRODUCT_NAME} ${PROJECT_VERSION}")
	set(CPACK_INSTALLER_GENERATOR_ARG "-G" "ZIP\\;NSIS")
elseif(${CMAKE_SYSTEM_NAME} MATCHES Darwin)
	file(TO_NATIVE_PATH "${MAIN_TARGET_RESOURCE_DIR}/app.icns" CPACK_PACKAGE_ICON)
	set(CPACK_DMG_SLA_USE_RESOURCE_FILE_LICENSE "ON")
	set(CPACK_INSTALLER_GENERATOR_ARG "-G" "ZIP\\\;DragNDrop")
elseif(${CMAKE_SYSTEM_NAME} MATCHES Linux)
	set(CPACK_INSTALLER_GENERATORS "TGZ")
	find_program(rpmbuild_Found rpmbuild)
	if (rpmbuild_Found)
		list(APPEND CPACK_INSTALLER_GENERATORS "RPM")
		set(CPACK_RPM_POST_INSTALL_SCRIPT_FILE "${CMAKE_BINARY_DIR}/postinst")
	endif()
	find_program(dpkg_Found dpkg)
	if (dpkg_Found)
		list(APPEND CPACK_INSTALLER_GENERATORS "DEB")
		set(CPACK_DEBIAN_PACKAGE_CONTROL_EXTRA "${CMAKE_BINARY_DIR}/postinst")
	endif()
	string(JOIN "\\\\;" CPACK_INSTALLER_GENERATOR_LIST ${CPACK_INSTALLER_GENERATORS})
	set(CPACK_INSTALLER_GENERATOR_ARG "-G" "${CPACK_INSTALLER_GENERATOR_LIST}")
endif()

include(CPack)

add_custom_target(${MAIN_TARGET_NAME}-package-zip
	${CMAKE_CPACK_COMMAND}
	--config "${CMAKE_BINARY_DIR}/CPackConfig.cmake"
	-G ZIP
)
add_dependencies(${MAIN_TARGET_NAME}-package-zip ${MAIN_TARGET_NAME})

add_custom_target(${MAIN_TARGET_NAME}-package-inst
	${CMAKE_CPACK_COMMAND}
	--config "${CMAKE_BINARY_DIR}/CPackConfig.cmake"
	${CPACK_INSTALLER_GENERATOR_ARG}
)
add_dependencies(${MAIN_TARGET_NAME}-package-inst ${MAIN_TARGET_NAME})

add_custom_target(${MAIN_TARGET_NAME}-package-source-zip
	${CMAKE_CPACK_COMMAND}
	--config "${CMAKE_BINARY_DIR}/CPackSourceConfig.cmake"
	-G ZIP
)
