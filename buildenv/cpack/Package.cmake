if(NOT PRODUCT_NAME)
    set(PRODUCT_NAME "${CMAKE_PROJECT_NAME}")
endif()
if(NOT PRODUCT_TITLE)
    set(PRODUCT_TITLE "${CMAKE_PROJECT_NAME}")
endif()
if(NOT MAIN_TARGET_NAME)
    set(MAIN_TARGET_NAME "${CMAKE_PROJECT_NAME}")
endif()
if(NOT TARGET_ARCH_ID)
    set(TARGET_ARCH_ID "${CMAKE_SYSTEM_PROCESSOR}")
endif()

set(CPACK_PACKAGE_VENDOR "${PRODUCT_VENDOR}")
set(CPACK_PACKAGE_CONTACT ${PRODUCT_MAINTANER})
set(CPACK_PACKAGE_NAME "${PRODUCT_NAME}")
if(DEFINED CPACK_SINGLE_TARGET_SYSTEM)
    set(CPACK_SYSTEM_NAME "${TARGET_ARCH_ID}")
else()
    set(CPACK_SYSTEM_NAME "${CMAKE_SYSTEM_NAME}-${TARGET_ARCH_ID}")
endif()
set(CPACK_PACKAGE_INSTALL_DIRECTORY "${PRODUCT_NAME}-${PRODUCT_VERSION}")
set(CPACK_PACKAGE_INSTALL_REGISTRY_KEY "${PRODUCT_NAME}-${PRODUCT_VERSION}")
set(CPACK_PACKAGE_EXECUTABLES ${MAIN_TARGET_NAME};${PRODUCT_TITLE})
if(WORKSPACE_ROOT)
    set(CPACK_PACKAGE_DIRECTORY "${WORKSPACE_ROOT}/distr")
endif()
set(CPACK_PACKAGE_CHECKSUM "SHA256")
set(CPACK_SOURCE_IGNORE_FILES "/thirdparty/[^/]+/(src|stamp|stage)/;/build/;/CVS/;/\\\\.svn/;/\\\\.bzr/;/\\\\.hg/;/\\\\.git/;\\\\.swp\$;\\\\.#;/#")

if(PRODUCT_LICENSE_FILE)
    file(TO_NATIVE_PATH ${PRODUCT_LICENSE_FILE} CPACK_RESOURCE_FILE_LICENSE)
endif()

if(${CMAKE_SYSTEM_NAME} MATCHES Windows)
    if(PRODUCT_LICENSE_FILE)
	    STRING(REGEX REPLACE "\\\\" "\\\\\\\\" CPACK_RESOURCE_FILE_LICENSE "${CPACK_RESOURCE_FILE_LICENSE}")
    endif()
    if(NOT CPACK_PACKAGE_ICON)
	    file(TO_NATIVE_PATH "${MAIN_TARGET_RESOURCE_DIR}/app.ico" CPACK_PACKAGE_ICON)
	    STRING(REGEX REPLACE "\\\\" "\\\\\\\\" CPACK_PACKAGE_ICON "${CPACK_PACKAGE_ICON}")
    endif()
    
    if(NOT CPACK_INSTALLER_GENERATORS)
        set(CPACK_INSTALLER_GENERATORS "ZIP" "NSIS")
    endif()

    if("NSIS" IN_LIST CPACK_INSTALLER_GENERATORS)
        message(STATUS "Configuring NSIS")
	    set(CPACK_NSIS_MUI_ICON "${CPACK_PACKAGE_ICON}")
	    #set(CPACK_NSIS_MUI_UNIICON "${CPACK_PACKAGE_ICON}")	
	    set(CPACK_NSIS_DISPLAY_NAME "${PRODUCT_NAME} ${PRODUCT_VERSION}")

    else("INNOSETUP" IN_LIST CPACK_INSTALLER_GENERATORS)
        message(STATUS "Configuring INNOSETUP")
        find_program(ISCC_COMMAND iscc HINTS $ENV{INNOSETUP_HOME})
        if(ISCC_COMMAND)
            set(CPACK_INNOSETUP_EXECUTABLE "${ISCC_COMMAND}")
        endif()
        string(TOLOWER ${TARGET_ARCH_ID} CPACK_INNOSETUP_ARCHITECTURE)
        set(CPACK_INNOSETUP_ICON_FILE "${CPACK_PACKAGE_ICON}")
        set(CPACK_INNOSETUP_SETUP_WizardSmallImageFile "compiler:WizClassicSmallImage.bmp")
        set(CPACK_INNOSETUP_PROGRAM_MENU_FOLDER "${PRODUCT_TITLE}")
        set(CPACK_INNOSETUP_DEFINE_MAIN_TARGET ${MAIN_TARGET_NAME}.exe)
        set(CPACK_INNOSETUP_DEFINE_PRODUCT_NAME ${PRODUCT_NAME})
        set(CPACK_INNOSETUP_DEFINE_PRODUCT_TITLE ${PRODUCT_TITLE})
        set(CPACK_INNOSETUP_DEFINE_PRODUCT_VENDOR ${PRODUCT_VENDOR})
        set(CPACK_INNOSETUP_SETUP_AppName ${PRODUCT_TITLE})
        set(CPACK_INNOSETUP_SETUP_AppVerName "${PRODUCT_TITLE} ${PRODUCT_VERSION}")
        set(CPACK_INNOSETUP_SETUP_UninstallDisplayName ${PRODUCT_TITLE})
        set(CPACK_INNOSETUP_SETUP_UninstallDisplayIcon "{app}\\\\bin\\\\${MAIN_TARGET_NAME}.exe")
        set(CPACK_INNOSETUP_SETUP_VersionInfoVersion "${PRODUCT_VERSION}.${BUILD_NUMBER}")
        set(CPACK_INNOSETUP_SETUP_VersionInfoTextVersion "${PRODUCT_VERSION}")
        set(CPACK_INNOSETUP_SETUP_VersionInfoCompany "${PRODUCT_VENDOR}")
        set(CPACK_INNOSETUP_SETUP_VersionInfoCopyright "${PROJECT_COPYRIGHT}")

        find_program(SIGNTOOL_COMMAND signtool)
        if(SIGNTOOL_COMMAND)
            if(SIGNER_ISSUER)
                set(SIGNTOOL_OBJECT_ARG "/i $q${SIGNER_ISSUER}$q")
            elseif(SIGNER_CERT)
                STRING(REGEX REPLACE "\\\\" "\\\\\\\\" SIGNER_CERT_INNO "${SIGNER_CERT}")
                set(SIGNTOOL_OBJECT_ARG "/f $q${SIGNER_CERT_INNO}$q")
            endif()
            if(SIGNER_PASS)
                set(SIGNTOOL_PASS_ARG "/p $q${SIGNER_PASS}$q")
            endif()
            if(SIGNTOOL_OBJECT_ARG)
                set(CPACK_INNOSETUP_EXECUTABLE_ARGUMENTS
                    "\\\"/Sscripted=$q${SIGNTOOL_COMMAND}$q sign /tr http://timestamp.digicert.com /td SHA256 /fd SHA256 /v ${SIGNTOOL_OBJECT_ARG} ${SIGNTOOL_PASS_ARG} $f\\\"")
                set(CPACK_INNOSETUP_SETUP_SignTool "scripted")
                set(CPACK_INNOSETUP_SETUP_SignedUninstaller "yes")
            endif()
        endif()
    endif()
    
elseif(${CMAKE_SYSTEM_NAME} MATCHES Darwin)
    if(NOT CPACK_PACKAGE_ICON)
	    file(TO_NATIVE_PATH "${MAIN_TARGET_RESOURCE_DIR}/app.icns" CPACK_PACKAGE_ICON)
    endif()
    if(PRODUCT_LICENSE_FILE)
	    set(CPACK_DMG_SLA_USE_RESOURCE_FILE_LICENSE "ON")
    endif()
    if(NOT CPACK_INSTALLER_GENERATORS)
        set(CPACK_INSTALLER_GENERATORS "ZIP" "DragNDrop")
    endif()

elseif(${CMAKE_SYSTEM_NAME} MATCHES Linux)
	if(NOT CPACK_INSTALLER_GENERATORS)
        set(CPACK_INSTALLER_GENERATORS "TGZ")
        find_program(rpmbuild_Found rpmbuild)
        if (rpmbuild_Found)
            list(APPEND CPACK_INSTALLER_GENERATORS "RPM")
            set(CPACK_RPM_POST_INSTALL_SCRIPT_FILE "${CMAKE_BINARY_DIR}/postinst")
        endif()
        find_program(dpkg_Found dpkg)
        if (dpkg_Found)
            list(APPEND CPACK_INSTALLER_GENERATORS "DEB")
            set(CPACK_DEBIAN_PACKAGE_CONTROL_EXTRA "${CMAKE_BINARY_DIR}/postinst")
        endif()
    endif()
endif()

string(JOIN "\\\\;" CPACK_INSTALLER_GENERATOR_LIST ${CPACK_INSTALLER_GENERATORS})
set(CPACK_INSTALLER_GENERATOR_ARG "-G" ${CPACK_INSTALLER_GENERATOR_LIST})

include(CPack)

add_custom_target(${MAIN_TARGET_NAME}-package-zip
	${CMAKE_CPACK_COMMAND}
	--config "${CMAKE_BINARY_DIR}/CPackConfig.cmake"
	-G ZIP
)
add_dependencies(${MAIN_TARGET_NAME}-package-zip ${MAIN_TARGET_NAME})

add_custom_target(${MAIN_TARGET_NAME}-package-inst
	${CMAKE_CPACK_COMMAND}
	--config "${CMAKE_BINARY_DIR}/CPackConfig.cmake"
	${CPACK_INSTALLER_GENERATOR_ARG}
)
add_dependencies(${MAIN_TARGET_NAME}-package-inst ${MAIN_TARGET_NAME})

add_custom_target(${MAIN_TARGET_NAME}-package-source-zip
	${CMAKE_CPACK_COMMAND}
	--config "${CMAKE_BINARY_DIR}/CPackSourceConfig.cmake"
	-G ZIP
)
